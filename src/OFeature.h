#ifndef OFEATUREDEFFLAG
#define OFEATUREDEFFLAG

#include <stdio.h>
#include <list>
#include "OMutex.h"

// Class representing a feature of the items (ex. team, pos, game #)
class OFeature : public OMtxCtlBase
{
protected:
	typedef OMtxCtl<OFeature> OFeatMtxCtl;
	friend class OMtxCtl<OFeature>;
	// Core config
	int _ng;	// Number of groups for this feature.  These need not be disjoint sets!
	int _ni;	// Number of items (redundant, but useful to know at this level too!)
	bool _ispart;	// Is this feature a disjoint cover?
	bool *_ftable;	// Bool table of whether item i (row) is in group j (col) of this feature.  We take ownership of this once handed it, and delete it when done!

	// Generated by us
	int **_items;	// Items in each group. 
	int *_nitems;	// Number of items in each group

	// List of items to exclude when next ProcessExclusions() is called
	typedef std::list<std::pair<int,int> > ELIST;
	ELIST _texc;

	// Internal fns
	void delitems(void);		// Delete items, nitems
	void scangroups(void);		// Regen items, nitems
	bool getitem(int i,int g) const { return _ftable[_ng*i+g]; }	// Requires i,g already tested!
public:
	// Management
	OFeature(void) : OMtxCtlBase(), _ng(0), _ni(0), _ispart(false), _ftable(NULL), _items(NULL), _nitems(NULL), _texc() {}
	~OFeature(void);
	bool Configure(int ng,int ni,bool ispart,bool *ft);		// Populate with info we received.
	bool IsSensible(void) const;	// Some sanity checks

	// Information
	int NumGroups(void) const { return _ng; }
	bool IsItemInGroup(int i,int g) const { return (_ni>=0&&_ng>=0&&i>=0&&g>=0&&i<_ni&&g<_ng&&_ftable)?getitem(i,g):false; }	// Returns false if invalid
	int NumItemsInGroup(int j) const { return (_items&&j>=0&&j<_ng)?_nitems[j]:0; }		// Number of items in group j
	const int *ItemsInGroup(int j) const { return (_items&&j>=0&&j<_ng)?_items[j]:NULL; }
	bool IsPartition(void) const { return _ispart; }	// Is it a proper partition?

	// Masking
	void PrepToExclude(int i,int j); // Schedule item i for exclusion from group j.  If j=-1 exclude from all.
	void ProcessExclusions(void);		// Reconfigure everything so that all exclusions are applied.  This CANNOT be undone. 
	void Dump(FILE *f) const;	// Dump for debugging purposes.
};

#endif
